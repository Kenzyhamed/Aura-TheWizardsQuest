------- FILE SoundEffects.s LEVEL 1 PASS 3
      1  1160 ????						; in this program we experimented with different sound effects for our game
      2  1160 ????
      3  1160 ????				      processor	6502
      4  1160 ????
      5  1160 ????	       ff d2	   CHROUT     =	$ffd2
      6  1160 ????	       ff cc	   CLRCHN     =	$ffcc
      7  1160 ????	       ff ba	   HOME       =	$ffba
      8  1160 ????	       07 d0	   SCREEN_WIDTH =	2000
      9  1160 ????	       ff e4	   GETIN      =	$FFE4
     10  1160 ????
     11  1160 ????
     12  1001					      org	$1001	; Starting memory location
     13  1001
------- FILE stub.s LEVEL 2 PASS 3
      0  1001					      include	"stub.s"
      1  1001							; BASIC stub
      2  1001		       0b 10		      dc.w	nextstmt
      3  1003		       0a 00		      dc.w	10
      4  1005							;;; dc.b $9e, "4109", 0
      5  1005		       9e 34 31 38*	      dc.b	$9e, [start]d, 0
      6  100b				   nextstmt
      7  100b		       00 00		      dc.w	0
------- FILE SoundEffects.s
     15  100d
     16  100d		       10 03	   COUNTER    =	$1003	; Reserve 1 byte of memory for a counter
     17  100d		       10 04	   LOOP_COUNT =	$1004
     18  100d
     19  100d				   msg
     20  100d		       50 52 45 53*	      HEX	50 52 45 53 53 20 4B 45 59 20 46 4F 52 20 53 4F 55 4E 44 0D 0D 41 3A 20 44 45 41 54 48 20 20 0D 0A 42 3A 20 4A 55 4D 50 20 20 0D 0A 43 3A 20 50 4F 52 54 41 4C 20 20 0D 0A 44 3A 20 47 45 4D 20 43 4F 4C 4C 45 43 54 49 4F 4E 20 20 0D 00
     21  105b							;program starts here
     22  105b				   start
     23  105b		       a9 01		      LDA	#$01
     24  105d		       8d 03 10 	      STA	COUNTER
     25  1060		       a9 00		      LDA	#$00	; Initialize LOOP_COUNT to 0
     26  1062		       8d 04 10 	      STA	LOOP_COUNT
     27  1065
     28  1065		       a2 00		      LDX	#0	; Initialize index
     29  1067		       20 6d 10 	      JSR	clear_screen
     30  106a
     31  106a		       20 79 10 	      JSR	print_intro_msg
     32  106d
     33  106d				   clear_screen
     34  106d		       a9 20		      LDA	#$20	; Load space character (ASCII 32)
     35  106f		       9d 00 1e 	      STA	$1E00,X	; Store at screen memory
     36  1072		       e8		      INX		; Increment index
     37  1073		       ec d0 07 	      CPX	SCREEN_WIDTH	; Compare with total screen size (40 columns * 25 rows = $1C00)
     38  1076		       d0 f5		      BNE	clear_screen	; Loop until the entire screen is cleared
     39  1078		       60		      RTS
     40  1079
     41  1079				   print_intro_msg
     42  1079		       a2 00		      LDX	#0	; Initialize index
     43  107b
     44  107b				   print_char
     45  107b		       bd 0d 10 	      LDA	msg,X	;Load character
     46  107e
     47  107e		       c9 00		      CMP	#$00	;Is it 00
     48  1080		       f0 07		      BEQ	get_input	;If yes move on to get input
     49  1082
     50  1082		       20 d2 ff 	      JSR	CHROUT	;Print character
     51  1085
     52  1085		       e8		      INX		;Increment index
     53  1086
     54  1086		       4c 7b 10 	      JMP	print_char	;Repeat
     55  1089
     56  1089				   get_input
     57  1089		       20 e4 ff 	      JSR	GETIN
     58  108c
     59  108c		       c9 41		      CMP	#'A
     60  108e		       f0 24		      BEQ	sound_dead
     61  1090
     62  1090		       c9 42		      CMP	#'B
     63  1092		       f0 34		      BEQ	sound_jump
     64  1094
     65  1094		       c9 43		      CMP	#'C
     66  1096		       f0 3e		      BEQ	sound_portal
     67  1098
     68  1098		       c9 44		      CMP	#'D
     69  109a		       f0 48		      BEQ	sound_collect_gem
     70  109c
     71  109c		       4c 89 10 	      JMP	get_input
     72  109f
     73  109f				   loop
     74  109f							; increment the counter
     75  109f		       ad 03 10 	      LDA	COUNTER
     76  10a2		       ee 03 10 	      INC	COUNTER
     77  10a5
     78  10a5		       c9 02		      CMP	#$02
     79  10a7		       d0 f6		      BNE	loop
     80  10a9
     81  10a9		       ad 04 10 	      LDA	LOOP_COUNT	; Load LOOP_COUNT
     82  10ac		       ee 04 10 	      INC	LOOP_COUNT	; Increment LOOP_COUNT
     83  10af
     84  10af		       c9 01		      CMP	#$01	; Compare LOOP_COUNT with 1
     85  10b1		       d0 ec		      BNE	loop	; If LOOP_COUNT isn't 1, loop again
     86  10b3
     87  10b3		       60		      RTS
     88  10b4
     89  10b4				   sound_dead
     90  10b4		       a9 05		      LDA	#$05	; want to set volume to 5
     91  10b6		       8d 0e 90 	      STA	$900E	; memory location for setting volumne
     92  10b9
     93  10b9							;LDA #'D
     94  10b9							;JSR CHROUT
     95  10b9
     96  10b9		       20 20 11 	      JSR	c_note
     97  10bc
     98  10bc		       20 2e 11 	      JSR	d_note
     99  10bf
    100  10bf		       20 20 11 	      JSR	c_note
    101  10c2
    102  10c2		       20 2e 11 	      JSR	d_note
    103  10c5							;JSR d_note
    104  10c5							;JSR e_note
    105  10c5
    106  10c5		       4c 58 11 	      JMP	sound_off
    107  10c8
    108  10c8				   sound_jump
    109  10c8		       a9 05		      LDA	#$05	; want to set volume to 5
    110  10ca		       8d 0e 90 	      STA	$900E	; memory location for setting volumne
    111  10cd
    112  10cd							;LDA #'J
    113  10cd							;JSR CHROUT
    114  10cd
    115  10cd		       20 12 11 	      JSR	g_note
    116  10d0		       20 12 11 	      JSR	g_note
    117  10d3
    118  10d3		       4c 58 11 	      JMP	sound_off
    119  10d6
    120  10d6
    121  10d6				   sound_portal
    122  10d6		       a9 05		      LDA	#$05	; want to set volume to 5
    123  10d8		       8d 0e 90 	      STA	$900E	; memory location for setting volumne
    124  10db
    125  10db							;LDA #'P
    126  10db							;JSR CHROUT
    127  10db
    128  10db		       20 04 11 	      JSR	white_noise
    129  10de		       20 04 11 	      JSR	white_noise
    130  10e1
    131  10e1		       4c 58 11 	      JMP	sound_off
    132  10e4
    133  10e4				   sound_collect_gem
    134  10e4		       a9 05		      LDA	#$05
    135  10e6		       8d 0e 90 	      STA	$900E	; memory location for setting volumne
    136  10e9
    137  10e9							;LDA #'G
    138  10e9							;JSR CHROUT
    139  10e9
    140  10e9		       a9 d7		      LDA	#$D7
    141  10eb		       8d 0b 90 	      STA	$900B
    142  10ee		       a9 ee		      LDA	#$EE
    143  10f0		       8d 0c 90 	      STA	$900C	; Store the value in memory address 36874 ($90B in hex)
    144  10f3		       20 9f 10 	      JSR	loop
    145  10f6		       20 9f 10 	      JSR	loop
    146  10f9
    147  10f9							;	  JSR high_c_note
    148  10f9
    149  10f9
    150  10f9		       a9 00		      LDA	#$00
    151  10fb		       8d 0c 90 	      STA	$900C
    152  10fe		       8d 0b 90 	      STA	$900B
    153  1101
    154  1101		       4c 58 11 	      JMP	sound_off
    155  1104
    156  1104				   white_noise
    157  1104		       a9 f0		      LDA	#$F0
    158  1106		       8d 0d 90 	      STA	$900D	; Store the value in memory address 36874 ($90B in hex)
    159  1109		       20 9f 10 	      JSR	loop
    160  110c
    161  110c		       a9 00		      LDA	#$00
    162  110e		       8d 0d 90 	      STA	$900D
    163  1111
    164  1111		       60		      RTS
    165  1112				   g_note
    166  1112		       a9 eb		      LDA	#$EB
    167  1114		       8d 0a 90 	      STA	$900A	; Store the value in memory address 36874 ($90B in hex)
    168  1117		       20 9f 10 	      JSR	loop
    169  111a
    170  111a		       a9 00		      LDA	#$00
    171  111c		       8d 0a 90 	      STA	$900A
    172  111f
    173  111f		       60		      RTS
    174  1120
    175  1120				   c_note
    176  1120		       a9 87		      LDA	#$87
    177  1122		       8d 0a 90 	      STA	$900A	; Store the value in memory address 36874 ($90B in hex)
    178  1125		       20 9f 10 	      JSR	loop
    179  1128
    180  1128		       a9 00		      LDA	#$00
    181  112a		       8d 0a 90 	      STA	$900A
    182  112d
    183  112d		       60		      RTS
    184  112e
    185  112e				   d_note
    186  112e		       a9 93		      LDA	#$93
    187  1130		       8d 0a 90 	      STA	$900A
    188  1133		       20 9f 10 	      JSR	loop
    189  1136
    190  1136		       a9 00		      LDA	#$00
    191  1138		       8d 0a 90 	      STA	$900A
    192  113b
    193  113b		       60		      RTS
    194  113c
    195  113c				   e_note
    196  113c		       a9 9f		      LDA	#$9F
    197  113e		       8d 0a 90 	      STA	$900A
    198  1141		       20 9f 10 	      JSR	loop
    199  1144
    200  1144		       a9 00		      LDA	#$00
    201  1146		       8d 0a 90 	      STA	$900A
    202  1149
    203  1149		       60		      RTS
    204  114a
    205  114a				   high_c_note
    206  114a		       a9 f0		      LDA	#$F0
    207  114c		       8d 0c 90 	      STA	$900C
    208  114f		       20 9f 10 	      JSR	loop
    209  1152
    210  1152		       a9 00		      LDA	#$00
    211  1154		       8d 0c 90 	      STA	$900C
    212  1157
    213  1157		       60		      RTS
    214  1158
    215  1158
    216  1158				   sound_off
    217  1158		       a9 00		      LDA	#$00
    218  115a		       8d 0e 90 	      STA	$900E
    219  115d
    220  115d		       4c 89 10 	      JMP	get_input
