------- FILE TitleScreenMusic.s LEVEL 1 PASS 3
      1  10d6 ????						; in this program we experimented with title screen music
      2  10d6 ????						; it was tricky trying to figure our which notes to use to
      3  10d6 ????						; play a nice tune
      4  10d6 ????
      5  10d6 ????				      processor	6502
      6  10d6 ????
      7  10d6 ????	       ff d2	   CHROUT     =	$ffd2	; KERNAL routine to output a character
      8  10d6 ????	       ff e4	   GETIN      =	$FFE4	; Address for GETIN
      9  10d6 ????
     10  1001					      org	$1001	; Starting memory location
     11  1001
------- FILE stub.s LEVEL 2 PASS 3
      0  1001					      include	"stub.s"
      1  1001							; BASIC stub
      2  1001		       0b 10		      dc.w	nextstmt
      3  1003		       0a 00		      dc.w	10
      4  1005							;;; dc.b $9e, "4109", 0
      5  1005		       9e 34 31 34*	      dc.b	$9e, [start]d, 0
      6  100b				   nextstmt
      7  100b		       00 00		      dc.w	0
------- FILE TitleScreenMusic.s
     13  100b		       10 03	   COUNTER    =	$1003	; Reserve 1 byte of memory for a counter
     14  100b		       10 04	   LOOP_COUNT =	$1004
     15  100b		       07 d0	   SCREEN_WIDTH =	2000
     16  100d
     17  100d				   msg
     18  100d		       54 49 54 4c*	      HEX	54 49 54 4C 45 20 53 43 52 45 45 4E 20 4D 55 53 49 43 0D 28 50 4C 45 41 53 45 20 55 4E 4D 55 54 45 29 00
     19  1030
     20  1030							; our program starts here
     21  1030				   start
     22  1030		       a9 05		      LDA	#$05
     23  1032		       8d 0e 90 	      STA	$900E
     24  1035
     25  1035		       a2 00		      LDX	#0	; Initialize index
     26  1037		       20 3d 10 	      JSR	clear_screen
     27  103a
     28  103a		       20 49 10 	      JSR	print_intro_msg
     29  103d
     30  103d				   clear_screen
     31  103d		       a9 20		      LDA	#$20	; Load space character (ASCII 32)
     32  103f		       9d 00 1e 	      STA	$1E00,X	; Store at screen memory
     33  1042		       e8		      INX		; Increment index
     34  1043		       ec d0 07 	      CPX	SCREEN_WIDTH
     35  1046		       d0 f5		      BNE	clear_screen	; Loop until the entire screen is cleared
     36  1048		       60		      RTS
     37  1049
     38  1049				   print_intro_msg
     39  1049		       a2 00		      LDX	#0	; Initialize index
     40  104b
     41  104b				   print_char
     42  104b		       bd 0d 10 	      LDA	msg,X	;Load character
     43  104e
     44  104e		       c9 00		      CMP	#$00	;Is it 00
     45  1050		       f0 1c		      BEQ	title_sound	;If yes move on to title_sound
     46  1052
     47  1052		       20 d2 ff 	      JSR	CHROUT	;Print character
     48  1055
     49  1055		       e8		      INX		;Increment index
     50  1056
     51  1056		       4c 4b 10 	      JMP	print_char	;Repeat
     52  1059
     53  1059				   loop
     54  1059							; increment the counter
     55  1059		       ad 03 10 	      LDA	COUNTER
     56  105c		       ee 03 10 	      INC	COUNTER
     57  105f
     58  105f		       c9 ff		      CMP	#$FF
     59  1061		       d0 f6		      BNE	loop
     60  1063
     61  1063		       ad 04 10 	      LDA	LOOP_COUNT	; Load LOOP_COUNT
     62  1066		       ee 04 10 	      INC	LOOP_COUNT	; Increment LOOP_COUNT
     63  1069
     64  1069		       c9 01		      CMP	#$01	; Compare LOOP_COUNT with 30
     65  106b		       d0 ec		      BNE	loop	; If LOOP_COUNT isn't 2, loop again
     66  106d
     67  106d		       60		      RTS
     68  106e
     69  106e				   title_sound
     70  106e		       a9 05		      LDA	#$05	; want to set volume to 5
     71  1070		       8d 0e 90 	      STA	$900E	; memory location for setting volumne
     72  1073
     73  1073							;LDA #'T
     74  1073							;JSR CHROUT
     75  1073
     76  1073		       20 b2 10 	      JSR	e_note
     77  1076		       20 88 10 	      JSR	g_note
     78  1079		       20 b2 10 	      JSR	e_note
     79  107c		       20 96 10 	      JSR	c_note
     80  107f		       20 a4 10 	      JSR	d_note
     81  1082
     82  1082		       20 59 10 	      JSR	loop
     83  1085		       4c 6e 10 	      JMP	title_sound
     84  1088
     85  1088
     86  1088				   g_note
     87  1088		       a9 eb		      LDA	#$EB	; Load the value 135 (87 in hex) into the A register
     88  108a		       8d 0c 90 	      STA	$900C
     89  108d		       20 59 10 	      JSR	loop
     90  1090
     91  1090		       a9 00		      LDA	#$00
     92  1092		       8d 0c 90 	      STA	$900C
     93  1095
     94  1095		       60		      RTS
     95  1096
     96  1096				   c_note
     97  1096		       a9 87		      LDA	#$87	; Load the value 135 (87 in hex) into the A register
     98  1098		       8d 0c 90 	      STA	$900C	; Store the value in memory address 36874 ($90B in hex)
     99  109b		       20 59 10 	      JSR	loop
    100  109e
    101  109e		       a9 00		      LDA	#$00
    102  10a0		       8d 0c 90 	      STA	$900C
    103  10a3
    104  10a3		       60		      RTS
    105  10a4
    106  10a4				   d_note
    107  10a4		       a9 93		      LDA	#$93
    108  10a6		       8d 0c 90 	      STA	$900C
    109  10a9		       20 59 10 	      JSR	loop
    110  10ac
    111  10ac		       a9 00		      LDA	#$00
    112  10ae		       8d 0c 90 	      STA	$900C
    113  10b1
    114  10b1		       60		      RTS
    115  10b2
    116  10b2				   e_note
    117  10b2		       a9 9f		      LDA	#$9F
    118  10b4		       8d 0c 90 	      STA	$900C
    119  10b7		       20 59 10 	      JSR	loop
    120  10ba
    121  10ba		       a9 00		      LDA	#$00
    122  10bc		       8d 0c 90 	      STA	$900C
    123  10bf
    124  10bf		       60		      RTS
    125  10c0
    126  10c0				   high_c_note
    127  10c0		       a9 f0		      LDA	#$F0
    128  10c2		       8d 0c 90 	      STA	$900C
    129  10c5		       20 59 10 	      JSR	loop
    130  10c8
    131  10c8		       a9 00		      LDA	#$00
    132  10ca		       8d 0c 90 	      STA	$900C
    133  10cd
    134  10cd		       60		      RTS
    135  10ce				   sound_off
    136  10ce		       a9 00		      LDA	#$00
    137  10d0		       8d 0e 90 	      STA	$900E
    138  10d3
    139  10d3		       4c 30 10 	      JMP	start
