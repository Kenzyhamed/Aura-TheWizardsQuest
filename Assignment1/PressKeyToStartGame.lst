------- FILE PressKeyToStartGame.s LEVEL 1 PASS 3
      1  1083 ????						; here we experimented with prassing "A" to start the game
      2  1083 ????						; when you press "A" it clears the screen and displays a message
      3  1083 ????						; we are expecting to load the level data when "A" is pressed
      4  1083 ????
      5  1083 ????				      processor	6502
      6  1083 ????
      7  1083 ????	       ff d2	   CHROUT     =	$ffd2	; KERNAL routine to output a character
      8  1083 ????	       ff e4	   GETIN      =	$FFE4	; Address for GETIN
      9  1083 ????	       ff cc	   CLRCHN     =	$ffcc
     10  1083 ????	       ff ba	   SETLFS     =	$ffba
     11  1083 ????
     12  1083 ????	       07 d0	   SCREEN_WIDTH =	2000
     13  1083 ????
     14  1001					      org	$1001	; Starting memory location
     15  1001
------- FILE stub.s LEVEL 2 PASS 3
      0  1001					      include	"stub.s"
      1  1001							; BASIC stub
      2  1001		       0b 10		      dc.w	nextstmt
      3  1003		       0a 00		      dc.w	10
      4  1005							;;; dc.b $9e, "4109", 0
      5  1005		       9e 34 31 35*	      dc.b	$9e, [start]d, 0
      6  100b				   nextstmt
      7  100b		       00 00		      dc.w	0
------- FILE PressKeyToStartGame.s
     17  100d
     18  100d							; Define the string to print
     19  100d				   msg
     20  100d		       50 52 45 53*	      HEX	50 52 45 53 53 20 41 20 54 4F 20 53 54 41 52 54 0D 00
     21  101f
     22  101f				   play_msg
     23  101f		       48 45 4c 50*	      HEX	48 45 4C 50 20 41 55 52 41 20 43 4F 4C 4C 45 43 54 20 41 4C 4C 20 54 48 45 20 47 45 4D 53 00
     24  103e
     25  103e							; our program starts here
     26  103e				   start
     27  103e		       a2 00		      LDX	#0	; Initialize index
     28  1040		       20 46 10 	      JSR	clear_screen
     29  1043		       4c 52 10 	      JMP	print_intro_msg
     30  1046
     31  1046				   clear_screen
     32  1046		       a9 20		      LDA	#$20	; Load space character (ASCII 32)
     33  1048		       9d 00 1e 	      STA	$1E00,X	; Store at screen memory
     34  104b		       e8		      INX		; Increment index
     35  104c		       ec d0 07 	      CPX	SCREEN_WIDTH	; Compare with total screen size (40 columns * 25 rows = $1C00)
     36  104f		       d0 f5		      BNE	clear_screen	; Loop until the entire screen is cleared
     37  1051		       60		      RTS
     38  1052
     39  1052				   print_intro_msg
     40  1052		       a2 00		      LDX	#0	; Initialize index
     41  1054
     42  1054				   print_char
     43  1054		       bd 0d 10 	      LDA	msg,X	;Load character
     44  1057
     45  1057		       c9 00		      CMP	#$00	;Is it 00
     46  1059		       f0 07		      BEQ	wait_for_input	;If yes move on to get input
     47  105b
     48  105b		       20 d2 ff 	      JSR	CHROUT	;Print character
     49  105e
     50  105e		       e8		      INX		;Increment index
     51  105f
     52  105f		       4c 54 10 	      JMP	print_char	;Repeat
     53  1062
     54  1062				   wait_for_input
     55  1062		       20 e4 ff 	      JSR	GETIN
     56  1065
     57  1065		       c9 41		      CMP	#'A
     58  1067		       f0 02		      BEQ	start_game
     59  1069		       d0 f7		      BNE	wait_for_input
     60  106b
     61  106b				   start_game
     62  106b		       a2 00		      LDX	#0	; Initialize index
     63  106d		       20 46 10 	      JSR	clear_screen
     64  1070		       a2 00		      LDX	#0	; Initialize index
     65  1072
     66  1072				   print_char_game
     67  1072		       bd 1f 10 	      LDA	play_msg,X	;Load character
     68  1075
     69  1075		       c9 00		      CMP	#$00	;Is it 00
     70  1077		       f0 07		      BEQ	inf_loop	;If yes move on to get input
     71  1079
     72  1079		       20 d2 ff 	      JSR	CHROUT	;Print character
     73  107c
     74  107c		       e8		      INX		;Increment index
     75  107d
     76  107d		       4c 72 10 	      JMP	print_char_game	;Repeat
     77  1080
     78  1080				   inf_loop
     79  1080		       4c 80 10 	      JMP	inf_loop
